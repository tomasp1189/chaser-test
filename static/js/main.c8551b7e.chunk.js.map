{"version":3,"sources":["Table/TableRow.js","Table/TableCell.js","Table/TableTitleCell.js","Table/TableHead.js","Table/index.js","Table/TableContainer.js","App.js","serviceWorker.js","index.js"],"names":["TableRow","_ref","children","react_default","a","createElement","TableCell","row","column","type","style","textAlign","columnId","display","unpaidInvoices","marginLeft","backgroundColor","color","padding","borderRadius","fontSize","fontWeight","renderCell","TableTitleCell","name","renderTitleCell","TableHead","columns","Table_TableRow","map","Table_TableTitleCell","key","defaultProps","Table","rows","Table_TableHead","length","colSpan","index","Table_TableCell","concat","id","TableContainer","props","_useState","useState","_useState2","Object","slicedToArray","customers","setCustomers","useEffect","asyncToGenerator","regenerator_default","mark","_callee","_ref2","data","wrap","_context","prev","next","axios","get","headers","Authorization","sent","_","mapKeys","t0","abrupt","stop","apply","this","arguments","getCustomers","_useState3","_useState4","invoices","setInvoices","_ref3","_callee2","_ref4","invoiceData","_context2","keys","getInvoices","useMemo","forEach","invoice","customer","email","customer_email","paidInvoices","totalAmountPaid","totalAmountDue","paid","amount_paid","amount_due","src_Table","App","className","Table_TableContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8551b7e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TableRow = ({ children }) => {\n  return <tr>{children}</tr>;\n};\n\nTableRow.propTypes = {\n  children: PropTypes.arrayOf(PropTypes.node)\n};\n\nexport default TableRow;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TableCell = ({ row, column }) => {\n  const renderChip = () => {\n    return (\n      row.unpaidInvoices > 0 && (\n        <span\n          style={{\n            marginLeft: 5,\n            backgroundColor: 'red',\n            color: 'white',\n            padding: '2px 3px',\n            borderRadius: 5,\n            fontSize: 10,\n            fontWeight: 700\n          }}\n        >\n          Overdue\n        </span>\n      )\n    );\n  };\n  const renderCell = () => {\n    switch (column.type) {\n      case 'number':\n        return <td style={{ textAlign: 'right' }}>{row[column.columnId]}</td>;\n\n      case 'email':\n        return (\n          <td style={{ textAlign: 'right' }}>\n            <div style={{ display: 'flex' }}>\n              {row[column.columnId]}\n              {renderChip()}\n            </div>\n          </td>\n        );\n\n      default:\n        return <td style={{ textAlign: 'left' }}>{row[column.columnId]}</td>;\n    }\n  };\n\n  return renderCell();\n};\n\nTableCell.propTypes = {\n  row: PropTypes.object,\n  column: PropTypes.object\n};\n\nexport default TableCell;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TableTitleCell = ({ column }) => {\n  const renderTitleCell = () => {\n    switch (column.type) {\n      case 'number':\n        return <th style={{ textAlign: 'right' }}>{column.name}</th>;\n\n      default:\n        return <th style={{ textAlign: 'left' }}>{column.name}</th>;\n    }\n  };\n\n  return renderTitleCell();\n};\n\nTableTitleCell.propTypes = {\n  column: PropTypes.object\n};\n\nexport default TableTitleCell;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TableRow from './TableRow';\nimport TableTitleCell from './TableTitleCell';\n\nconst TableHead = ({ columns }) => {\n  return (\n    <thead>\n      <TableRow>\n        {columns.map(column => {\n          return <TableTitleCell key={column.columnId} column={column} />;\n        })}\n      </TableRow>\n    </thead>\n  );\n};\n\nTableHead.propTypes = {\n  columns: PropTypes.arrayOf(PropTypes.object)\n};\nTableHead.defaultProps = {\n  columns: []\n};\n\nexport default TableHead;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TableRow from './TableRow';\nimport TableCell from './TableCell';\nimport TableHead from './TableHead';\n\nconst columns = [\n  { columnId: 'id', name: '#', type: 'text' },\n  { columnId: 'email', name: 'Email', type: 'email' },\n  { columnId: 'paidInvoices', name: 'Paid Invoices', type: 'number' },\n  { columnId: 'totalAmountPaid', name: 'Total Amount Paid', type: 'number' },\n  { columnId: 'unpaidInvoices', name: 'Unpaid Invoices', type: 'number' },\n  { columnId: 'totalAmountDue', name: 'Total Amount Due', type: 'number' }\n];\n\nconst Table = ({ rows }) => {\n  const renderRows = () => {\n    return rows.length === 0 ? (\n      <tr>\n        <td colSpan={columns.length}>Loading...</td>\n      </tr>\n    ) : (\n      rows.map(row => {\n        return (\n          <TableRow>\n            {columns.map((column, index) => {\n              return (\n                <TableCell\n                  key={`cell-${row.id}-${index}`}\n                  row={row}\n                  column={column}\n                />\n              );\n            })}\n          </TableRow>\n        );\n      })\n    );\n  };\n\n  return (\n    <table>\n      <TableHead columns={columns} />\n      <tbody>{renderRows()}</tbody>\n    </table>\n  );\n};\n\nTable.propTypes = {\n  rows: PropTypes.arrayOf(PropTypes.object)\n};\nTable.defaultProps = {\n  rows: []\n};\n\nexport default Table;\n","import React, { useEffect, useMemo, useState } from 'react';\nimport _ from 'lodash';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport Table from '.';\n\nconst TableContainer = props => {\n  const [customers, setCustomers] = useState({});\n\n  // this would be inside a customerApiClient file\n\n  useEffect(() => {\n    const getCustomers = async () => {\n      try {\n        let url = 'https://api.stripe.com/v1/customers?limit=100';\n        const { data } = await axios.get(url, {\n          headers: {\n            Authorization: 'Bearer sk_test_4eC39HqLyjWDarjtT1zdp7dc'\n          }\n        });\n        setCustomers(_.mapKeys(data.data, 'id'));\n      } catch (error) {\n      } finally {\n        return;\n      }\n    };\n    getCustomers();\n  }, []);\n\n  const [invoices, setInvoices] = useState([]);\n\n  // this would be inside a invoiceApiClient file\n  useEffect(() => {\n    const getInvoices = async () => {\n      try {\n        const customersLength = Object.keys(customers).length;\n        if (customersLength === 0) return;\n        let url = 'https://api.stripe.com/v1/invoices';\n        let {\n          data: { data: invoiceData }\n        } = await axios.get(`${url}?limit=100`, {\n          headers: {\n            Authorization: 'Bearer sk_test_4eC39HqLyjWDarjtT1zdp7dc'\n          }\n        });\n        setInvoices(invoiceData);\n      } catch (error) {\n      } finally {\n        return;\n      }\n    };\n\n    getInvoices();\n  }, [customers]);\n\n  const rows = useMemo(() => {\n    if (invoices.length === 0) return;\n    const rows = {};\n    invoices.forEach(invoice => {\n      let row = rows[invoice.customer];\n      // if row doesn't exist yet we set initial values\n      if (!row)\n        row = {\n          id: invoice.customer,\n          email: invoice.customer_email,\n          paidInvoices: 0,\n          totalAmountPaid: 0,\n          unpaidInvoices: 0,\n          totalAmountDue: 0\n        };\n\n      row.paidInvoices = row.paidInvoices + (invoice.paid ? 1 : 0);\n      row.totalAmountPaid =\n        row.paidInvoices + (invoice.paid ? invoice.amount_paid : 0);\n      row.unpaidInvoices = row.unpaidInvoices + (!invoice.paid ? 1 : 0);\n      row.totalAmountDue =\n        row.paidInvoices + (!invoice.paid ? invoice.amount_due : 0);\n      rows[invoice.customer] = row;\n    });\n    return _.map(rows, row => row);\n  }, [customers, invoices]);\n  return <Table rows={rows} />;\n};\n\nTableContainer.propTypes = {};\n\nexport default TableContainer;\n","import React from 'react';\nimport './App.css';\nimport Table from './Table/TableContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}